{
	"info": {
		"_postman_id": "f6dcab43-3920-4053-a432-8b8d311e8add",
		"name": "Group 18",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_method",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/get_method?name=Nataliia&age=28",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_method"
					],
					"query": [
						{
							"key": "name",
							"value": "Nataliia"
						},
						{
							"key": "age",
							"value": "28"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"token\", jsonData.token);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{url}}/login",
					"host": [
						"{{url}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "new_data",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"name\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"salary\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"name\",\r",
							"    \"salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var carrier = JSON.parse(responseBody);\r",
							"    pm.expect(tv4.validate(carrier, schema)).to.be.true;\r",
							"}); \r",
							"\r",
							"//4) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"pm.test(\"Сorrect multiplication\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log (jsonData.salary[0],jsonData.salary[1],jsonData.salary[2] )\r",
							"    let salary =jsonData.salary[0];\r",
							"    let salary2 = parseInt((jsonData.salary[1])/2);\r",
							"    let salary3 = parseInt((jsonData.salary[2])/3);\r",
							"\r",
							"    pm.test(\"eql salary\", function () {\r",
							"    let jsonData = pm.response.json();\r",
							"    pm.expect(salary).to.eql(salary2);\r",
							"    pm.expect(salary).to.eql(salary3);\r",
							"   });\r",
							"\r",
							"});\r",
							"\r",
							"//5) проверить, что 2-й элемент массива salary больше 1-го и 0-го\r",
							"pm.test(\"Second element more than first and zero\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log (jsonData.salary[0],jsonData.salary[1],jsonData.salary[2] )\r",
							" pm.expect(parseInt(jsonData.salary[0, 1])).to.be.below(parseInt(jsonData.salary[2]));\r",
							"\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "18",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nataliia",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/new_data",
					"host": [
						"{{url}}"
					],
					"path": [
						"new_data"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//2) Проверка структуры json в ответе.\r",
							"var schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"person\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"u_age\": {\r",
							"          \"type\": \"integer\"\r",
							"        },\r",
							"        \"u_name\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": [\r",
							"            {\r",
							"              \"type\": \"null\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            },\r",
							"            {\r",
							"              \"type\": \"integer\"\r",
							"            }\r",
							"          ]\r",
							"        },\r",
							"        \"u_salary_1_5_year\": {\r",
							"          \"type\": \"integer\"\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"u_age\",\r",
							"        \"u_name\",\r",
							"        \"u_salary_1_5_year\"\r",
							"      ]\r",
							"    },\r",
							"    \"qa_salary_after_12_months\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"qa_salary_after_6_months\": {\r",
							"      \"type\": \"integer\"\r",
							"    },\r",
							"    \"start_qa_salary\": {\r",
							"      \"type\": \"integer\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"person\",\r",
							"    \"qa_salary_after_12_months\",\r",
							"    \"qa_salary_after_6_months\",\r",
							"    \"start_qa_salary\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});\r",
							"\r",
							"\r",
							"//3) В ответе указаны коэффициенты умножения salary, напишите тесты по проверке правильности результата перемножения на коэффициент.\r",
							"\r",
							"pm.test(\"Verify salary\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"u_salary_1_5_year\", jsonData.person.u_salary_1_5_year);\r",
							"\r",
							"     pm.test(\"Salary eql\", function () {\r",
							"     pm.expect(jsonData.start_qa_salary).to.eql((jsonData.person.u_salary_1_5_year/4));\r",
							"     pm.expect(jsonData.start_qa_salary).to.eql((jsonData.qa_salary_after_12_months/2.9));\r",
							"     pm.expect(jsonData.start_qa_salary).to.eql((jsonData.qa_salary_after_6_months/2));\r",
							"        console.log(jsonData.start_qa_salary);\r",
							"        console.log(jsonData.person.u_salary_1_5_year/4);\r",
							"        console.log(jsonData.qa_salary_after_12_months/2.9);\r",
							"        console.log(jsonData.qa_salary_after_6_months/2);\r",
							"    });\r",
							"});\r",
							"\r",
							"//3) Достать значение из поля 'u_salary_1.5_year' и передать в поле salary запроса http://116.203.27.46:5002 (http://188.130.138.105:5001/new_data)/get_test_user\r",
							"pm.environment.set(\"big_salary\", \"responseJson.person.u_salary_1_5_year\"); \r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"age\": 28,\r\n   \"salary\": 5000,\r\n   \"name\": \"Nataliia\",\r\n   \"auth_token\": \"{{token}}\"\r\n\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/user_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "test_pet_info",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2) Проверка структуры json в ответе.",
							"pm.test('Schema is valid', function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.be.an(\"object\");",
							"    pm.expect(jsonData.age).to.be.an(\"Number\");",
							"    pm.expect(jsonData.daily_food).to.be.an(\"Number\");",
							"    pm.expect(jsonData.daily_sleep).to.be.an(\"Number\");",
							"    pm.expect(jsonData.name).to.be.an(\"String\"); ",
							"});",
							"",
							"//3) В ответе указаны коэффициенты умножения weight, напишите тесты по проверке правильности результата перемножения на коэффициент.",
							"var jsonData = JSON.parse(responseBody);",
							"postman.setEnvironmentVariable(\"weight\", jsonData.weight);",
							"",
							"pm.test(\"Verify coefficient\", function () {",
							"    var jsonData = pm.response.json();",
							"    let weight = 57 ;",
							"    pm.expect(weight).to.eql(parseInt(jsonData.daily_food/0.012))",
							"    pm.expect(weight).to.eql(parseInt(jsonData.daily_sleep/2.5))",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"/*const getCurrencyUrl = pm.variables.get(\"url\")+'/curr_byn';",
							"",
							"pm.response.json().forEach((currency) => {",
							"    pm.sendRequest(getCurrencyUrl, function (err, response) {",
							"        if (response.code != 200) {",
							"            return;",
							"        }",
							"",
							"        const json = response.json();",
							"",
							"        if (pm.expect(json).exist('Cur_OfficialRate')) {",
							"            console.log(json);",
							"        }",
							"    });",
							"});*/",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "weight",
							"value": "57",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nataliia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/test_pet_info",
					"host": [
						"{{url}}"
					],
					"path": [
						"test_pet_info"
					]
				}
			},
			"response": []
		},
		{
			"name": "get_test_user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"//2) Проверка структуры json в ответе.",
							"var schema ={",
							" \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"age\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"family\": {",
							"      \"type\": \"object\",",
							"      \"properties\": {",
							"        \"children\": {",
							"          \"type\": \"array\",",
							"          \"items\": [",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            },",
							"            {",
							"              \"type\": \"array\",",
							"              \"items\": [",
							"                {",
							"                  \"type\": \"string\"",
							"                },",
							"                {",
							"                  \"type\": \"integer\"",
							"                }",
							"              ]",
							"            }",
							"          ]",
							"        },",
							"        \"u_salary_1_5_year\": {",
							"          \"type\": \"integer\"",
							"        }",
							"      },",
							"      \"required\": [",
							"        \"children\",",
							"        \"u_salary_1_5_year\"",
							"      ]",
							"    },",
							"    \"name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"salary\": {",
							"      \"type\": \"integer\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"age\",",
							"    \"family\",",
							"    \"name\",",
							"    \"salary\"",
							"  ]",
							"};",
							"pm.test('Json is valid', function () {",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;",
							"});",
							"",
							"",
							"//3) Проверить что значение поля name = значению переменной name из окружения;4) Проверить что занчение поля age в ответе соответсвует отправленному в запросе значению поля age",
							"pm.test(\"Verify eql age, name\", function (){",
							"    var jsonData = pm.response.json();",
							"    console.log(jsonData)",
							"    pm.environment.set(\"age\", jsonData.age);",
							"    pm.environment.set(\"name\", jsonData.name);",
							"    pm.expect(jsonData.age).to.eql(String(28));",
							"    pm.expect(jsonData.name).to.eql(\"Nataliia\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "28",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "5000",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Nataliia",
							"type": "text"
						},
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/get_test_user",
					"host": [
						"{{url}}"
					],
					"path": [
						"get_test_user"
					]
				}
			},
			"response": []
		},
		{
			"name": "currency",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Можете взять любой объект из присланного списка, используйте js random.",
							"const namData = pm.response.json();",
							"let object = namData[Math.floor(Math.random ()*namData.length)];",
							"",
							"//В объекте возьмите Cur_ID и передать через окружение в следующий запрос.",
							"pm.environment.set(\"Cur_ID\",object.Cur_ID);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					]
				}
			},
			"response": []
		},
		{
			"name": "curr_byn",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1) Статус код 200",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//2) Проверка структуры json в ответе.",
							"var schema = {",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",",
							"  \"type\": \"object\",",
							"  \"properties\": {",
							"    \"Cur_Abbreviation\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_ID\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Cur_Name\": {",
							"      \"type\": \"string\"",
							"    },",
							"    \"Cur_OfficialRate\": {",
							"      \"type\": \"number\"",
							"    },",
							"    \"Cur_Scale\": {",
							"      \"type\": \"integer\"",
							"    },",
							"    \"Date\": {",
							"      \"type\": \"string\"",
							"    }",
							"  },",
							"  \"required\": [",
							"    \"Cur_Abbreviation\",",
							"    \"Cur_ID\",",
							"    \"Cur_Name\",",
							"    \"Cur_OfficialRate\",",
							"    \"Cur_Scale\",",
							"    \"Date\"",
							"  ]",
							"}",
							"pm.test(\"Shema is valid\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{Cur_ID}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/curr_byn",
					"host": [
						"{{url}}"
					],
					"path": [
						"curr_byn"
					]
				}
			},
			"response": []
		},
		{
			"name": "Work_with ***",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1)Получить список валют;2) Интерировать список валют (each)",
							"pm.response.json().each(function(curr) {",
							" //3) в каждой итерации отправлять запрос на сервер для получения курса каждой валюты",
							"    pm.sendRequest({",
							"\t\t\t\t\t\turl: pm.variables.get(\"url\")+'/curr_byn',",
							"\t\t\t\t\t\tmethod: 'POST',",
							"                        header: 'Content-Type:application/json',",
							"                        mode: 'raw',",
							"\t\t\t\t\t\tbody: {",
							"                            mode: 'urlencoded',",
							"                            urlencoded:[",
							"                                {key: 'auth_token', value: pm.variables.get(\"token\")},",
							"                                {key: 'curr_code', value: curr.Cur_ID}",
							"                            ]",
							"                        }",
							"\t\t\t\t\t}, function (err, response) {",
							"       //4) если возвращается 500 код, переходим к следующей итреации;5) если получаем 200 код, проверяем response json на наличие поля \"Cur_OfficialRate\"",
							"        if ((response.code == 200) && (response.json().Cur_OfficialRate != null))",
							"            console.log(response.json())",
							"    });",
							"});",
							"",
							"",
							"",
							"",
							"",
							"",
							"",
							"/*let name = pm.sendRequest(\"http://116.203.27.46:5002/curr_byn\", function (err, response){",
							"    console.log(response.json());",
							"}); ",
							"pm.test (\"Your test name\", function(){",
							"    var jsonData = pm.response.json();",
							"    var numberSelected = 0;",
							"    for (let i=0; i<jsonData.length; i++){",
							"        console.log(jsonData[1].Cur_ID)",
							"        if (responseCode.code ===500){",
							"            numberSelected++}",
							"            else if (responseCode.code ===200){",
							"                let hasName = \"Cur_OfficialRate\" in jsonData;",
							"                console.log(hasName);",
							"            };",
							"        };",
							"    });*/",
							"",
							"",
							"     // let resBody = new Buffer.from(response.stream).toString()",
							"          // let resBody = JSON.parse(response.stream.toString())",
							"          // let resBody = response.json()",
							"",
							"",
							"",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"type": "text"
						},
						{
							"key": "curr_code",
							"value": "{{currid}}",
							"type": "text"
						}
					],
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/currency",
					"host": [
						"{{url}}"
					],
					"path": [
						"currency"
					],
					"query": [
						{
							"key": "auth_token",
							"value": "{{token}}",
							"disabled": true
						},
						{
							"key": "curr_code",
							"value": "145",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}