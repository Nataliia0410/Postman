{
	"info": {
		"_postman_id": "80773bb9-64df-48ec-aab6-146f7f3eda9e",
		"name": "AGE_EUROPE",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Class_0-17_age_europe_-1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"pm.expect(+jsonData.length).to.eql(NaN)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "-1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "116.203.27.46:5002/age_europe?age=int",
					"host": [
						"116",
						"203",
						"27",
						"46"
					],
					"port": "5002",
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_0",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "0",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "1",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_8",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "8",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_16",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "16",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "17",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_0-17_age_europe_18",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 0) && (jsonData.age <=17))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							" pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_17",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"underage\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "17",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_18",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "18",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_19",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "19",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_33",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "33",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_49",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "49",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_50",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"           // if ((jsonData.age >= 50) && (jsonData.age <=100))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_18-50_age_europe_51",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "51",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_49 Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"adult\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(17)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "49",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_50",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "50",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_51",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "51",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_64",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "64",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_99",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//тест на то чтобы вернулся правильный класс этого человека\r",
							"pm.test(\"Right class\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"    pm.expect(jsonData.age_type).to.equal((\"antiquity\"))\r",
							"          //  if ((jsonData.age >= 18) && (jsonData.age <=50))\r",
							"           // console.log(jsonData)\r",
							"    ;\r",
							"});\r",
							"//подсчитываем количество елементов вернувшиеся в списке\r",
							"pm.test(\"number of elements\", function () {\r",
							"    var jsonData= pm.response.json();\r",
							"//pm.expect(+jsonData.length).to.eql(NaN)\r",
							"pm.expect(+jsonData.content.length).to.eql(8)\r",
							"console.log(jsonData)\r",
							"});\r",
							"\r",
							"\r",
							"//проверяем структуру json\r",
							"var schema ={\r",
							"\"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"age\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"age_type\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"content\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": [\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        {\r",
							"          \"type\": \"string\"\r",
							"        }\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"age\",\r",
							"    \"age_type\",\r",
							"    \"content\"\r",
							"  ]\r",
							"}\r",
							"    pm.test('Json is valid', function () {\r",
							"    pm.expect(tv4.validate(JSON.parse(responseBody), schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "99",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_100",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "100",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Class_50-100_age_europe_101",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "101",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/age_europe",
					"host": [
						"{{url}}"
					],
					"path": [
						"age_europe"
					],
					"query": [
						{
							"key": "age",
							"value": "int",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}